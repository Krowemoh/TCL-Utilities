*
   GIT.FILENAME = 'SOLR.CREATE'
   GIT.REPO = 'https://github.com/Krowemoh/TCL-Utilities.git'
*
* COMPILER DIRECTIVES
*
   $DEFINE DATABASE.QM
   $DEFINE PLATFORM.LINUX
*
   $IFDEF DATABASE.QM
      $CATALOGUE LOCAL
   $ENDIF
*
*
* VERSION
*
   VERSION = '1'
*
   @USER1 = 'SOLR.CREATE'
   @USER2 = 'SOLR.CREATE'
*
   EQU TRUE TO 1
   EQU FALSE TO 0
*
   CALL GET.ARGUMENTS(ARGUMENTS)
*
   ARGS.LEN = DCOUNT(ARGUMENTS,@AM)
*
   IF ARGS.LEN = 1 THEN
      PRINT 'SOLR.CREATE - Create a collection using the Solr API'
      PRINT
      PRINT '    Create:'
      PRINT '        SOLR.CREATE {collection-name}'
      PRINT
      STOP
   END
*
   IF ARGS.LEN # 2 THEN
      PRINT 'Invalid number of arguments.'
      STOP
   END
*
   COLLECTION.NAME = ARGUMENTS<2>
*
   JSON = ''
   CALL JSON.ADD(JSON,'name',COLLECTION.NAME)
   CALL JSON.ADD(JSON,'config','_default')
   CALL JSON.ADD(JSON,'numShards','2')
   CALL JSON.ADD(JSON,'replicationFactor','2')
*
   CALL JSON.CREATE.OBJECT(JSON)
*
   CMD = 'curl --silent'
   CMD = CMD : ' -X POST'
   CMD = CMD : " -H 'Content-Type: application/json'"
   CMD = CMD : ' http://localhost:8983/api/collections'
   CMD = CMD : " -d '" : JSON : "'"
*
   $IFDEF DATABASE.UV
      EXECUTE \SH -c "\ : CMD : \"\ CAPTURING RESULTS
   $ENDIF
*
   $IFDEF DATABASE.QM
      EXECUTE '!' : CMD CAPTURING RESULTS
   $ENDIF
*
   CALL JSON.PARSE(RESULTS,RESPONSE.JSON)
   CALL JSON.QUERY(RESPONSE.JSON,'.responseHeader.status',STATUS)
*
   IF STATUS # '0' THEN
      PRINT 'Failed to create: ' : COLLECTION.NAME
      PRINT RESULTS
      STOP
   END
*
   RESULTS = ''
   RESPONSE.JSON = ''
   STATUS = ''
*
   CMD = \curl --silent\
   CMD = CMD : \ -X POST\
   CMD = CMD : \ -H 'Content-Type: application/json'\
   CMD = CMD : \ http://localhost:8983/solr/\ :  COLLECTION.NAME : \/schema\
   CMD = CMD : \ --data-binary '{"add-copy-field" : {"source":"*","dest":"_text_"}}'\
   CMD = CMD : \ | jq -c .\
*
   $IFDEF DATABASE.UV
      EXECUTE \SH -c "\ : CMD : \"\ CAPTURING RESULTS
   $ENDIF
*
   $IFDEF DATABASE.QM
      EXECUTE '!' : CMD CAPTURING RESULTS
   $ENDIF
*
   CALL JSON.PARSE(RESULTS,RESPONSE.JSON)
   CALL JSON.QUERY(RESPONSE.JSON,'.responseHeader.status',STATUS)
*
   IF STATUS = '0' THEN
      PRINT 'Successfully created: ' : COLLECTION.NAME
*
   END ELSE
      PRINT 'Failed to create catchall field on: ' : COLLECTION.NAME
      PRINT RESULTS
   END
*
   STOP
*
* END OF PROGRAM
*
   END
*
